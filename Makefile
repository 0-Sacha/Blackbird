# Alternative GNU Make project makefile autogenerated by Premake

ifndef config
  config=debug_x64
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild

SHELLTYPE := posix
ifeq (.exe,$(findstring .exe,$(ComSpec)))
	SHELLTYPE := msdos
endif

# Configurations
# #############################################

RESCOMP = windres
PCH = src/Blackbirdpch.h
PCH_PLACEHOLDER = $(OBJDIR)/$(notdir $(PCH))
GCH = $(PCH_PLACEHOLDER).gch
INCLUDES += -I../EngineCore/src -I../EngineCore/src/EngineCore -I../EngineCore/src/EngineCore/Core -I../EngineCore/src/EngineCore/LIB -I../EngineCore/src/EngineCore/TNX -I../EngineCore/src/EngineCore/Test -Isrc -IDependencies -IDependencies/GLFW/include -IDependencies/Glad/include -IDependencies/ImGui -IDependencies/glm -IDependencies/stb_image
FORCE_INCLUDE +=
ALL_CPPFLAGS += $(CPPFLAGS) -MD -MP $(DEFINES) $(INCLUDES)
ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
define PREBUILDCMDS
endef
define PRELINKCMDS
endef
define POSTBUILDCMDS
endef

ifeq ($(config),debug_x64)
TARGETDIR = ../bin/Windows-gmake2/Debug-x64/Blackbird
TARGET = $(TARGETDIR)/Blackbird.lib
OBJDIR = ../bin-int/Windows-gmake2/Debug-x64/Blackbird
DEFINES += -DARCHITECTURE_X64 -DTARGET_DEBUG -DCOMPILER_GMAKE -DPLATFORM_WINDOWS -DGLFW_INCLUDE_NONE -D_CRT_SECURE_NO_WARNINGS
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O0 -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O0 -g -std=c++20
LIBS += ../bin/Windows-gmake2/Debug-x64/EngineCore/EngineCore.lib ../bin/Windows-gmake2/Debug-x64/GLFW/GLFW.lib ../bin/Windows-gmake2/Debug-x64/Glad/Glad.lib ../bin/Windows-gmake2/Debug-x64/ImGui/ImGui.lib -lopengl32.lib
LDDEPS += ../bin/Windows-gmake2/Debug-x64/EngineCore/EngineCore.lib ../bin/Windows-gmake2/Debug-x64/GLFW/GLFW.lib ../bin/Windows-gmake2/Debug-x64/Glad/Glad.lib ../bin/Windows-gmake2/Debug-x64/ImGui/ImGui.lib
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64

else ifeq ($(config),release_x64)
TARGETDIR = ../bin/Windows-gmake2/Release-x64/Blackbird
TARGET = $(TARGETDIR)/Blackbird.lib
OBJDIR = ../bin-int/Windows-gmake2/Release-x64/Blackbird
DEFINES += -DARCHITECTURE_X64 -DTARGET_RELEASE -DCOMPILER_GMAKE -DPLATFORM_WINDOWS -DGLFW_INCLUDE_NONE -D_CRT_SECURE_NO_WARNINGS
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -g -std=c++20
LIBS += ../bin/Windows-gmake2/Release-x64/EngineCore/EngineCore.lib ../bin/Windows-gmake2/Release-x64/GLFW/GLFW.lib ../bin/Windows-gmake2/Release-x64/Glad/Glad.lib ../bin/Windows-gmake2/Release-x64/ImGui/ImGui.lib -lopengl32.lib
LDDEPS += ../bin/Windows-gmake2/Release-x64/EngineCore/EngineCore.lib ../bin/Windows-gmake2/Release-x64/GLFW/GLFW.lib ../bin/Windows-gmake2/Release-x64/Glad/Glad.lib ../bin/Windows-gmake2/Release-x64/ImGui/ImGui.lib
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64

else ifeq ($(config),dist_x64)
TARGETDIR = ../bin/Windows-gmake2/Dist-x64/Blackbird
TARGET = $(TARGETDIR)/Blackbird.lib
OBJDIR = ../bin-int/Windows-gmake2/Dist-x64/Blackbird
DEFINES += -DARCHITECTURE_X64 -DTARGET_DIST -DCOMPILER_GMAKE -DPLATFORM_WINDOWS -DGLFW_INCLUDE_NONE -D_CRT_SECURE_NO_WARNINGS
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O3
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O3 -std=c++20
LIBS += ../bin/Windows-gmake2/Dist-x64/EngineCore/EngineCore.lib ../bin/Windows-gmake2/Dist-x64/GLFW/GLFW.lib ../bin/Windows-gmake2/Dist-x64/Glad/Glad.lib ../bin/Windows-gmake2/Dist-x64/ImGui/ImGui.lib -lopengl32.lib
LDDEPS += ../bin/Windows-gmake2/Dist-x64/EngineCore/EngineCore.lib ../bin/Windows-gmake2/Dist-x64/GLFW/GLFW.lib ../bin/Windows-gmake2/Dist-x64/Glad/Glad.lib ../bin/Windows-gmake2/Dist-x64/ImGui/ImGui.lib
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -s

endif

# Per File Configurations
# #############################################


# File sets
# #############################################

GENERATED :=
OBJECTS :=

GENERATED += $(OBJDIR)/Application.o
GENERATED += $(OBJDIR)/Blackbirdpch.o
GENERATED += $(OBJDIR)/Core.o
GENERATED += $(OBJDIR)/EntryPoint.o
GENERATED += $(OBJDIR)/ImGuiBuild.o
GENERATED += $(OBJDIR)/ImGuiLayer.o
GENERATED += $(OBJDIR)/Layer.o
GENERATED += $(OBJDIR)/LayerStack.o
GENERATED += $(OBJDIR)/OpenGLBuffer.o
GENERATED += $(OBJDIR)/OpenGLContext.o
GENERATED += $(OBJDIR)/OpenGLRendererAPI.o
GENERATED += $(OBJDIR)/OpenGLVertexArray.o
GENERATED += $(OBJDIR)/OpenGlDebug.o
GENERATED += $(OBJDIR)/OrthographicCamera.o
GENERATED += $(OBJDIR)/OrthographicCameraController.o
GENERATED += $(OBJDIR)/Renderer.o
GENERATED += $(OBJDIR)/RendererAPI.o
GENERATED += $(OBJDIR)/VertexBuffer.o
GENERATED += $(OBJDIR)/VertexBufferLayout.o
GENERATED += $(OBJDIR)/RendererCommand.o
GENERATED += $(OBJDIR)/Shader.o
GENERATED += $(OBJDIR)/VertexArray.o
GENERATED += $(OBJDIR)/WindowsInput.o
GENERATED += $(OBJDIR)/WindowsWindow.o
OBJECTS += $(OBJDIR)/Application.o
OBJECTS += $(OBJDIR)/Blackbirdpch.o
OBJECTS += $(OBJDIR)/Core.o
OBJECTS += $(OBJDIR)/EntryPoint.o
OBJECTS += $(OBJDIR)/ImGuiBuild.o
OBJECTS += $(OBJDIR)/ImGuiLayer.o
OBJECTS += $(OBJDIR)/Layer.o
OBJECTS += $(OBJDIR)/LayerStack.o
OBJECTS += $(OBJDIR)/OpenGLBuffer.o
OBJECTS += $(OBJDIR)/OpenGLContext.o
OBJECTS += $(OBJDIR)/OpenGLRendererAPI.o
OBJECTS += $(OBJDIR)/OpenGLVertexArray.o
OBJECTS += $(OBJDIR)/OpenGlDebug.o
OBJECTS += $(OBJDIR)/OrthographicCamera.o
OBJECTS += $(OBJDIR)/OrthographicCameraController.o
OBJECTS += $(OBJDIR)/Renderer.o
OBJECTS += $(OBJDIR)/RendererAPI.o
OBJECTS += $(OBJDIR)/VertexBuffer.o
OBJECTS += $(OBJDIR)/VertexBufferLayout.o
OBJECTS += $(OBJDIR)/RendererCommand.o
OBJECTS += $(OBJDIR)/Shader.o
OBJECTS += $(OBJDIR)/VertexArray.o
OBJECTS += $(OBJDIR)/WindowsInput.o
OBJECTS += $(OBJDIR)/WindowsWindow.o

# Rules
# #############################################

all: $(TARGET)
	@:

$(TARGET): $(GENERATED) $(OBJECTS) $(LDDEPS) | $(TARGETDIR)
	$(PRELINKCMDS)
	@echo Linking Blackbird
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(OBJDIR):
	@echo Creating $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif

clean:
	@echo Cleaning Blackbird
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(GENERATED)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(GENERATED)) del /s /q $(subst /,\\,$(GENERATED))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild: | $(OBJDIR)
	$(PREBUILDCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) | $(PCH_PLACEHOLDER)
$(GCH): $(PCH) | prebuild
	@echo $(notdir $<)
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
$(PCH_PLACEHOLDER): $(GCH) | $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) touch "$@"
else
	$(SILENT) echo $null >> "$@"
endif
else
$(OBJECTS): | prebuild
endif


# File Rules
# #############################################

$(OBJDIR)/Application.o: src/Blackbird/Core/Application/Application.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Core.o: src/Blackbird/Core/Core.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/EntryPoint.o: src/Blackbird/Core/EntryPoint.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Layer.o: src/Blackbird/Core/Layer/Layer.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/LayerStack.o: src/Blackbird/Core/Layer/LayerStack.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/ImGuiLayer.o: src/Blackbird/ImGui/ImGuiLayer.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VertexBuffer.o: src/Blackbird/Renderer/Asset/VertexBuffer.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/RendererBufferLayout.o: src/Blackbird/Renderer/Asset/RendererBufferLayout.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VertexArray.o: src/Blackbird/Renderer/Asset/VertexArray.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/OrthographicCamera.o: src/Blackbird/Renderer/Camera/OrthographicCamera.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/OrthographicCameraController.o: src/Blackbird/Renderer/Camera/OrthographicCameraController.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Renderer.o: src/Blackbird/Renderer/Renderer.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/RendererAPI.o: src/Blackbird/Renderer/RendererAPI.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/RendererCommand.o: src/Blackbird/Renderer/RendererCommand.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Shader.o: src/Blackbird/Renderer/Shader/Shader.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Blackbirdpch.o: src/Blackbirdpch.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/ImGuiBuild.o: src/Platform/OpenGL/ImGuiBuild.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/OpenGLBuffer.o: src/Platform/OpenGL/Renderer/Asset/OpenGLBuffer.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/OpenGLVertexArray.o: src/Platform/OpenGL/Renderer/Asset/OpenGLVertexArray.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/OpenGLContext.o: src/Platform/OpenGL/Renderer/Context/OpenGLContext.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/OpenGLRendererAPI.o: src/Platform/OpenGL/Renderer/OpenGLRendererAPI.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/OpenGlDebug.o: src/Platform/OpenGL/Utils/Debug/OpenGlDebug.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/WindowsInput.o: src/Platform/Windows/WindowsInput.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/WindowsWindow.o: src/Platform/Windows/WindowsWindow.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) -include $(PCH_PLACEHOLDER) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(PCH_PLACEHOLDER).d
endif